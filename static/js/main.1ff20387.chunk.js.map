{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChangeValue","e","searchTerm","target","value","setState","fetchdata","state","books","axios","get","then","res","data","items","this","book","src","volumeInfo","imageLinks","thumbnail","str","console","log","undefined","length","substring","className","type","placeholder","onChange","map","key","id","addThumbnail","title","truncateStr","description","href","infoLink","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4SA2FeA,E,kDAtFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAkBRC,kBAAoB,SAACC,GACnB,IAAMC,EAAaD,EAAEE,OAAOC,MAC5B,EAAKC,SAAS,CAAEH,eAChB,EAAKI,UAAUJ,IApBf,EAAKK,MAAQ,CACXL,WAAY,GACZM,MAAO,IAJQ,E,sDAOTN,GAAa,IAAD,OACpBO,IACGC,IADH,wDACwDR,IACrDS,MAAK,SAACC,GACL,EAAKP,SAAS,CAAEG,MAAOI,EAAIC,KAAKC,a,0CAGjB,IACXZ,EAAea,KAAKR,MAApBL,WACRa,KAAKT,UAAUJ,K,mCASJc,GACX,IAAIC,EAAMD,EAAKE,WAAWC,WAC1B,MAAmB,qBAARF,EACF,kCAEAA,EAAIG,Y,kCAGHC,GAEV,OADAC,QAAQC,IAAIF,QACAG,IAARH,EACKA,EAAII,OAAS,IAAMJ,EAAIK,UAAU,EAAG,KAAO,OAASL,EAEtD,8B,+BAGC,IAAD,OACP,OACE,yBAAKM,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,eAAd,eACA,2BACEC,KAAK,OACLC,YAAY,0CACZF,UAAU,eACVvB,MAAOW,KAAKR,MAAML,WAClB4B,SAAUf,KAAKf,qBAGnB,wBAAI2B,UAAU,YACXZ,KAAKR,MAAMC,MAAMiB,OAAS,GACzBV,KAAKR,MAAMC,MAAMuB,KAAI,SAACf,GAAD,OACnB,wBAAIW,UAAU,WAAWK,IAAKhB,EAAKiB,IACjC,yBAAKN,UAAU,UAAUV,IAAK,EAAKiB,aAAalB,KAChD,yBAAKW,UAAU,YACb,yBAAKA,UAAU,gBACb,2BAAOA,UAAU,kBAAjB,SACA,uBAAGA,UAAU,aAAb,IAA2BX,EAAKE,WAAWiB,QAE7C,yBAAKR,UAAU,gBACb,2BAAOA,UAAU,kBAAjB,eACA,uBAAGA,UAAU,aACV,IACA,EAAKS,YAAYpB,EAAKE,WAAWmB,cAChC,4BAA6B,MAGnC,yBAAKV,UAAU,gBACb,uBAAGA,UAAU,aACX,uBAAGW,KAAMtB,EAAKE,WAAWqB,UAAzB,0B,GA3EJC,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.1ff20387.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: \"\",\n      books: [],\n    };\n  }\n  fetchdata(searchTerm) {\n    axios\n      .get(`https://www.googleapis.com/books/v1/volumes?q=${searchTerm}`)\n      .then((res) => {\n        this.setState({ books: res.data.items });\n      });\n  }\n  componentDidMount() {\n    const { searchTerm } = this.state;\n    this.fetchdata(searchTerm);\n  }\n\n  handleChangeValue = (e) => {\n    const searchTerm = e.target.value;\n    this.setState({ searchTerm });\n    this.fetchdata(searchTerm);\n  };\n\n  addThumbnail(book) {\n    let src = book.volumeInfo.imageLinks;\n    if (typeof src === \"undefined\") {\n      return \"https://via.placeholder.com/400\";\n    } else {\n      return src.thumbnail;\n    }\n  }\n  truncateStr(str) {\n    console.log(str);\n    if (str !== undefined) {\n      return str.length > 150 ? str.substring(0, 150) + \" ...\" : str;\n    }\n    return \"Description Not available\";\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <h1 className=\"big-heading\">Book Finder</h1>\n          <input\n            type=\"text\"\n            placeholder=\"Search books by name, author or keyword\"\n            className=\"search-input\"\n            value={this.state.searchTerm}\n            onChange={this.handleChangeValue}\n          ></input>\n        </header>\n        <ul className=\"bookList\">\n          {this.state.books.length > 0 &&\n            this.state.books.map((book) => (\n              <li className=\"bookItem\" key={book.id}>\n                <img className=\"bookImg\" src={this.addThumbnail(book)}></img>\n                <div className=\"bookInfo\">\n                  <div className=\"bookInfo-row\">\n                    <label className=\"bookInfo-label\">Title</label>\n                    <p className=\"bookTitle\"> {book.volumeInfo.title}</p>\n                  </div>\n                  <div className=\"bookInfo-row\">\n                    <label className=\"bookInfo-label\">Description</label>\n                    <p className=\"bookTitle\">\n                      {\" \"}\n                      {this.truncateStr(book.volumeInfo.description) ||\n                        \"Description not available\"}{\" \"}\n                    </p>\n                  </div>\n                  <div className=\"bookInfo-row\">\n                    <p className=\"bookTitle\">\n                      <a href={book.volumeInfo.infoLink}>Find More</a>\n                    </p>\n                  </div>\n                </div>\n              </li>\n            ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}